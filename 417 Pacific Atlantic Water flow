class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        
        rows = len(heights)
        cols = len(heights[0])
        pac, atl = set(), set()
        directions = [(-1, 0), (1, 0), (0, 1), (0, -1)]
        
        def dfs(visited, x, y):
            visited.add((x, y))
            for dx,dy in directions:
                new_x, new_y = x+dx, y+dy
                if 0 <= new_x < rows and 0 <= new_y < cols and (new_x, new_y) not in visited and heights[new_x][new_y] >= heights[x][y]:
                    dfs(visited, new_x, new_y)
                
        
        # start from first row and last row 
        for i in range(rows):
            dfs(pac, i, 0)
            dfs(atl, i, cols-1)
            
        # start from first column and last column
        for j in range(cols):
            dfs(pac, 0, j)
            dfs(atl, rows-1, j)
            
        print(pac)
        print(atl)
        return list(pac.intersection(atl))

