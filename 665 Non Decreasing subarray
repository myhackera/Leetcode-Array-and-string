O(n^2) Solution
===============>>>>>

class Solution:
    def checkPossibility(self, nums: List[int]) -> bool:
        
        
        def lis(nums, n):
            
            dp = [1]*n
            
            for i in range(1, n):
                for j in range(i):
                    
                    if nums[i] >= nums[j] and dp[i] <= dp[j]+1:
                        dp[i] = 1+dp[j]
            
            return max(dp)
        
        lis = lis(nums, len(nums))
        return len(nums)-lis <= 1
        
O(n) Solution
==============>>>>

        unstable = 0
        for i in range(1, len(nums)):
            if nums[i] < nums[i-1]:
                unstable += 1
                if i < 2 or nums[i-2] <= nums[i]:
                    nums[i-1] = nums[i]
                else:
                    nums[i] = nums[i-1]
                if unstable > 1:
                    return False
        return True
