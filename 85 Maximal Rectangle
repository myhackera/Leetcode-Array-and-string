class Solution:
    def largest_rectangle(self, arr):
        
        n = len(arr)
        st = []
        left = []
        right = []
        
        for i in range(n-1, -1, -1):
            
            while st and arr[st[-1]] >= arr[i]:
                st.pop()
                
            if not st:
                right.append(n)
            else:
                right.append(st[-1])
            
            st.append(i)
            
        right.reverse()
            
        st = []
        for i in range(n):
            
            while st and arr[st[-1]] >= arr[i]:
                st.pop()
            
            if not st:
                left.append(-1)
            else:
                left.append(st[-1])
            
            st.append(i)
            
        result = 0
        for i in range(n):
            result = max(result, arr[i]*(right[i]-left[i]-1))
        
        return result
    
    def maximalRectangle(self, matrix: List[List[str]]) -> int:
        
        m = len(matrix)
        n = len(matrix[0])
        
        matrix = [[int(matrix[i][j]) for j in range(n)] for i in range(m)]
        
        result = self.largest_rectangle(matrix[0])
        
        for i in range(1, m):
            for j in range(n):
                
                if matrix[i][j]:
                    matrix[i][j] += matrix[i-1][j]
                
            result = max(result, self.largest_rectangle(matrix[i]))
            
        return result
                    
